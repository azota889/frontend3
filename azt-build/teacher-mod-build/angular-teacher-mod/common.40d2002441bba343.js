"use strict";(self.webpackChunkTeacherMod=self.webpackChunkTeacherMod||[]).push([[76],{59518:(h,_,r)=>{r.d(_,{s:()=>n});var i=r(48891),g=r(21164),u=r(26384),o=r(50830);let n=(()=>{var t;class e{ExamExerciseOfProgramToSessionStorage(c,s,p){const m=this.commonService.getMyQueryParam("indexSession"),l=this.commonService.getMyQueryParam("programId");if(null!=m&&null!=l){const d=this.browserStorageService.getSessionStorage(`${this.key+l}`);if(d){const f=this.zipDataService.decodeContentGzip(d),v=this.commonService.castJsonToObj(f),b={id:-1,refId:c,name:s,type:p,willRemove:!1};v?.sessionFormArray[m].documentObjs.push(b);const x=this.zipDataService.convertContentGzip(this.commonService.serializeJson(v??{}));this.browserStorageService.saveSessionStorage(`${this.key+l}`,x)}}}removeProgramDataLocal(c){this.browserStorageService.removeSessionStorage(`${this.key+c}`)}constructor(c,s,p){this.commonService=c,this.zipDataService=s,this.browserStorageService=p,this.key="data_educational_program_"}}return(t=e).\u0275fac=function(c){return new(c||t)(i.KVO(g.R),i.KVO(u.j),i.KVO(o.z))},t.\u0275prov=i.jDH({token:t,factory:t.\u0275fac,providedIn:"root"}),e})()},20980:(h,_,r)=>{r.d(_,{z:()=>p});var i=r(54460),g=r(10936),u=r(65162),o=r(44327),n=r(55887),t=r(88023),e=r(15343),a=r(5502),c=r(44155),s=r(48891);let p=(()=>{var m;class l extends t.H{constructor(){super(...arguments),this.id="default-id"}}return(m=l).\u0275fac=(()=>{let d;return function(v){return(d||(d=s.xGo(m)))(v||m)}})(),m.\u0275cmp=s.VBU({type:m,selectors:[["app-common-master-page"]],inputs:{id:"id"},standalone:!0,features:[s.Vt3,s.aNF],decls:2,vars:1,consts:[[3,"id"]],template:function(f,v){1&f&&(s.j41(0,"div",0),s.nrm(1,"router-outlet"),s.k0s()),2&f&&s.FS9("id",v.id)},dependencies:[i.MD,g.X1,u.iI,u.n3,g.YN,c.s,e.flO,n.L,a.Id,o.k],encapsulation:2}),l})()},50708:(h,_,r)=>{r.d(_,{f:()=>g});var i=r(73014);class g{constructor(o,n,t="https://lti-canvas-clound.azota.vn"){this.businessId=o,this.authUserId=n,this.apiDomain=t}getCourseExam(o,n,t){var e=this;return(0,i.A)(function*(){return e.baseGet(`api/course-exam/${o}/${n}`,{classroomId:t.toString()})})()}openLinkOpenApp(o,n){window.location.href=this.renderLinkOpenApp(o,n)}renderLinkOpenApp(o,n){const t=new URL(`${this.apiDomain}/api/connect/application`),e={businessId:this.businessId.toString(),azotaAuthId:this.authUserId.toString()};return o&&(e.examCatId=o.toString()),n&&(e.examId=n.toString()),t.search=new URLSearchParams(e).toString(),t.toString()}postCourseExam(o,n,t,e,a,c){var s=this;return(0,i.A)(function*(){return s.basePost(`api/course-exam/${o}/${n}`,{name:t,classroomId:e,benchmark:a,groupId:c})})()}baseGet(o,n){var t=this;return(0,i.A)(function*(){try{const e=new URL(`${t.apiDomain}/${o}`);e.search=new URLSearchParams({...n,businessId:t.businessId.toString(),azotaAuthId:t.authUserId.toString()}).toString();const a=yield fetch(e.toString(),{method:"GET",headers:{}});if(!a.ok)throw new Error(`Error: ${a.status} - ${a.statusText}`);return yield a.json()}catch(e){throw console.error("baseGet Error:",e),e}})()}basePost(o,n){var t=this;return(0,i.A)(function*(){try{const e=`${t.apiDomain}/${o}`,a=yield fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({...n,businessId:t.businessId,azotaAuthId:t.authUserId})});if(!a.ok)throw new Error(`Error: ${a.status} - ${a.statusText}`);return yield a.json()}catch(e){throw console.error("basePost Error:",e),e}})()}}},18470:(h,_,r)=>{r.r(_),r.d(_,{conf:()=>a,language:()=>c});var i=r(18343),g=Object.defineProperty,u=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,n=Object.prototype.hasOwnProperty,e={};((s,p,m,l)=>{if(p&&"object"==typeof p||"function"==typeof p)for(let d of o(p))!n.call(s,d)&&"default"!==d&&g(s,d,{get:()=>p[d],enumerable:!(l=u(p,d))||l.enumerable})})(e,i);var a={wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],onEnterRules:[{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,afterText:/^\s*\*\/$/,action:{indentAction:e.languages.IndentAction.IndentOutdent,appendText:" * "}},{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,action:{indentAction:e.languages.IndentAction.None,appendText:" * "}},{beforeText:/^(\t|(\ \ ))*\ \*(\ ([^\*]|\*(?!\/))*)?$/,action:{indentAction:e.languages.IndentAction.None,appendText:"* "}},{beforeText:/^(\t|(\ \ ))*\ \*\/\s*$/,action:{indentAction:e.languages.IndentAction.None,removeText:1}}],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"',notIn:["string"]},{open:"'",close:"'",notIn:["string","comment"]},{open:"`",close:"`",notIn:["string","comment"]},{open:"/**",close:" */",notIn:["string"]}],folding:{markers:{start:new RegExp("^\\s*//\\s*#?region\\b"),end:new RegExp("^\\s*//\\s*#?endregion\\b")}}},c={defaultToken:"invalid",tokenPostfix:".ts",keywords:["abstract","any","as","asserts","bigint","boolean","break","case","catch","class","continue","const","constructor","debugger","declare","default","delete","do","else","enum","export","extends","false","finally","for","from","function","get","if","implements","import","in","infer","instanceof","interface","is","keyof","let","module","namespace","never","new","null","number","object","package","private","protected","public","override","readonly","require","global","return","set","static","string","super","switch","symbol","this","throw","true","try","type","typeof","undefined","unique","unknown","var","void","while","with","yield","async","await","of"],operators:["<=",">=","==","!=","===","!==","=>","+","-","**","*","/","%","++","--","<<","</",">>",">>>","&","|","^","!","~","&&","||","??","?",":","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=","@"],symbols:/[=><!~?:&|+\-*\/\^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,digits:/\d+(_+\d+)*/,octaldigits:/[0-7]+(_+[0-7]+)*/,binarydigits:/[0-1]+(_+[0-1]+)*/,hexdigits:/[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,regexpctl:/[(){}\[\]\$\^|\-*+?\.]/,regexpesc:/\\(?:[bBdDfnrstvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,tokenizer:{root:[[/[{}]/,"delimiter.bracket"],{include:"common"}],common:[[/[a-z_$][\w$]*/,{cases:{"@keywords":"keyword","@default":"identifier"}}],[/[A-Z][\w\$]*/,"type.identifier"],{include:"@whitespace"},[/\/(?=([^\\\/]|\\.)+\/([dgimsuy]*)(\s*)(\.|;|,|\)|\]|\}|$))/,{token:"regexp",bracket:"@open",next:"@regexp"}],[/[()\[\]]/,"@brackets"],[/[<>](?!@symbols)/,"@brackets"],[/!(?=([^=]|$))/,"delimiter"],[/@symbols/,{cases:{"@operators":"delimiter","@default":""}}],[/(@digits)[eE]([\-+]?(@digits))?/,"number.float"],[/(@digits)\.(@digits)([eE][\-+]?(@digits))?/,"number.float"],[/0[xX](@hexdigits)n?/,"number.hex"],[/0[oO]?(@octaldigits)n?/,"number.octal"],[/0[bB](@binarydigits)n?/,"number.binary"],[/(@digits)n?/,"number"],[/[;,.]/,"delimiter"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/"/,"string","@string_double"],[/'/,"string","@string_single"],[/`/,"string","@string_backtick"]],whitespace:[[/[ \t\r\n]+/,""],[/\/\*\*(?!\/)/,"comment.doc","@jsdoc"],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"]],comment:[[/[^\/*]+/,"comment"],[/\*\//,"comment","@pop"],[/[\/*]/,"comment"]],jsdoc:[[/[^\/*]+/,"comment.doc"],[/\*\//,"comment.doc","@pop"],[/[\/*]/,"comment.doc"]],regexp:[[/(\{)(\d+(?:,\d*)?)(\})/,["regexp.escape.control","regexp.escape.control","regexp.escape.control"]],[/(\[)(\^?)(?=(?:[^\]\\\/]|\\.)+)/,["regexp.escape.control",{token:"regexp.escape.control",next:"@regexrange"}]],[/(\()(\?:|\?=|\?!)/,["regexp.escape.control","regexp.escape.control"]],[/[()]/,"regexp.escape.control"],[/@regexpctl/,"regexp.escape.control"],[/[^\\\/]/,"regexp"],[/@regexpesc/,"regexp.escape"],[/\\\./,"regexp.invalid"],[/(\/)([dgimsuy]*)/,[{token:"regexp",bracket:"@close",next:"@pop"},"keyword.other"]]],regexrange:[[/-/,"regexp.escape.control"],[/\^/,"regexp.invalid"],[/@regexpesc/,"regexp.escape"],[/[^\]]/,"regexp"],[/\]/,{token:"regexp.escape.control",next:"@pop",bracket:"@close"}]],string_double:[[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,"string","@pop"]],string_single:[[/[^\\']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/'/,"string","@pop"]],string_backtick:[[/\$\{/,{token:"delimiter.bracket",next:"@bracketCounting"}],[/[^\\`$]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/`/,"string","@pop"]],bracketCounting:[[/\{/,"delimiter.bracket","@bracketCounting"],[/\}/,"delimiter.bracket","@pop"],{include:"common"}]}}}}]);