"use strict";(self.webpackChunkBalacoClient=self.webpackChunkBalacoClient||[]).push([[2076],{88089:(b,u,l)=>{l.d(u,{J:()=>y});var v=l(27691),h=l(51698),x=l(64198),m=l(26860),O=l(2812),w=l(41426),g=l(63709);let y=(()=>{var d;class _{replaceImageInContent(e){return new h.c(n=>{if(e.includes("<img ")){var t=this.findAllSubString(e,"<img"),o=[],r=[];t.forEach(i=>{var a=e.indexOf("src=",i),c=e.indexOf('"',Number(a)+5),s=e.substring(Number(a)+5,Number(c)+1);s.includes(";base64")?o.push({oldUrl:s}):s.includes("blob:")&&r.push({oldUrl:s})}),o.length>0?this.reUploadBase64File(o,(i,a)=>{null==a?r&&r.length>0?this.reUploadBlobFile(r,(c,s)=>{null!=s?(e=this.replaceHomeworkContent(e,i),e=this.replaceHomeworkContent(e,c),n.next({errorMessage:void 0,content:e}),n.complete()):(n.next({errorMessage:s,content:e}),n.complete())}):(e=this.replaceHomeworkContent(e,i),n.next({errorMessage:void 0,content:e}),n.complete()):(n.next({errorMessage:a,content:e}),n.complete())}):r.length>0?this.reUploadBlobFile(r,(i,a)=>{null==a?(e=this.replaceHomeworkContent(e,i),n.next({errorMessage:void 0,content:e}),n.complete()):(n.next({errorMessage:a,content:e}),n.complete())}):(e=this.replaceHomeworkContent(e,[]),n.next({errorMessage:void 0,content:e}),n.complete())}else n.next({errorMessage:void 0,content:e}),n.complete()})}replaceHomeworkContent(e,n){return n.length>0&&n.forEach(t=>{e=e.replace(t.oldUrl??"  ",t.newUrl+'" class="w-100 img-fluid"')}),e}findAllSubString(e,n){for(var t=0,o=0,r=[];e.indexOf(n,t)>-1;)o=e.indexOf(n,t),r.push(o),t=o+n.length;return r}getTypeFile(e){var n=e.indexOf(";");return e.substring(5,n)}getFileName(e){var n=e.split("").reverse().join(""),t=n.indexOf(";"),o=n.indexOf("/",t);return n.substring(t,o).split("").reverse().join("")}convertBlobToBase64(e){return new Promise(n=>{var t=new Image;t.crossOrigin="Anonymous",t.addEventListener("load",function(){var o=document.createElement("canvas"),r=o.getContext("2d");o.width=t.width,o.height=t.height,r?.drawImage(t,0,0);var i=o.toDataURL("image/png");n(i)},!1),t.src=e})}reUploadBase64File(e,n){if(e&&e.length>0){let i,r=e.length;for(var t=[],o=0;o<e.length;o++){const a=e[o],c=a.oldUrl?.substring(0,a.oldUrl.length-1);this.startUploadBlobFile(a,c??"",[],(s,f)=>{null==f?t=t.concat(s):i=f,r-=1,0==r&&n(t,i)})}}else n([],"lang_auto_khong_upload_duoc_anh_vui_long_thu_lai_sau")}reUploadBlobFile(e,n){if(e&&e.length>0){let i,r=e.length;for(var t=[],o=0;o<e.length;o++){const a=e[o],c=a?.oldUrl?.substring(0,a.oldUrl.length-1);this.convertBlobToBase64(c??"").then(s=>{this.startUploadBlobFile(a,s,[],(f,k)=>{null==k?t=t.concat(f):i=k,r-=1,0==r&&n(t,i)})})}}else n([],"lang_auto_khong_upload_duoc_anh_vui_long_thu_lai_sau")}startUploadBlobFile(e,n,t,o){if(n&&""!=n){var r=this.getTypeFile(n),i=this.myPdfService.b64toFile(n,this.getFileName(r),r);(0,x.w4)(i).then(a=>{this.apiUploadService.uploadToCdnForHomework(a).subscribe(c=>{if(c.type!=v.hv.UploadProgress)if(1==c.success){var s={...e,newUrl:c.data?.url??""};t.push(s),o(t,void 0)}else o(t,this.commonService.translateToKeyParam("lang_auto_khong_upload_duoc_anh_vui_long_thu_lai_sau_loi",c.message??"none"))})})}else o(t,"lang_auto_khong_upload_duoc_anh_vui_long_thu_lai_sau")}constructor(e,n,t){this.commonService=e,this.apiUploadService=n,this.myPdfService=t}}return(d=_).\u0275fac=function(e){return new(e||d)(m.KVO(O.R),m.KVO(w.T),m.KVO(g.C))},d.\u0275prov=m.jDH({token:d,factory:d.\u0275fac,providedIn:"root"}),_})()},18470:(b,u,l)=>{l.r(u),l.d(u,{conf:()=>y,language:()=>d});var v=l(41574),h=Object.defineProperty,x=Object.getOwnPropertyDescriptor,m=Object.getOwnPropertyNames,O=Object.prototype.hasOwnProperty,g={};((_,p,e,n)=>{if(p&&"object"==typeof p||"function"==typeof p)for(let t of m(p))!O.call(_,t)&&"default"!==t&&h(_,t,{get:()=>p[t],enumerable:!(n=x(p,t))||n.enumerable})})(g,v);var y={wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],onEnterRules:[{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,afterText:/^\s*\*\/$/,action:{indentAction:g.languages.IndentAction.IndentOutdent,appendText:" * "}},{beforeText:/^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,action:{indentAction:g.languages.IndentAction.None,appendText:" * "}},{beforeText:/^(\t|(\ \ ))*\ \*(\ ([^\*]|\*(?!\/))*)?$/,action:{indentAction:g.languages.IndentAction.None,appendText:"* "}},{beforeText:/^(\t|(\ \ ))*\ \*\/\s*$/,action:{indentAction:g.languages.IndentAction.None,removeText:1}}],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"',notIn:["string"]},{open:"'",close:"'",notIn:["string","comment"]},{open:"`",close:"`",notIn:["string","comment"]},{open:"/**",close:" */",notIn:["string"]}],folding:{markers:{start:new RegExp("^\\s*//\\s*#?region\\b"),end:new RegExp("^\\s*//\\s*#?endregion\\b")}}},d={defaultToken:"invalid",tokenPostfix:".ts",keywords:["abstract","any","as","asserts","bigint","boolean","break","case","catch","class","continue","const","constructor","debugger","declare","default","delete","do","else","enum","export","extends","false","finally","for","from","function","get","if","implements","import","in","infer","instanceof","interface","is","keyof","let","module","namespace","never","new","null","number","object","package","private","protected","public","override","readonly","require","global","return","set","static","string","super","switch","symbol","this","throw","true","try","type","typeof","undefined","unique","unknown","var","void","while","with","yield","async","await","of"],operators:["<=",">=","==","!=","===","!==","=>","+","-","**","*","/","%","++","--","<<","</",">>",">>>","&","|","^","!","~","&&","||","??","?",":","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=","@"],symbols:/[=><!~?:&|+\-*\/\^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,digits:/\d+(_+\d+)*/,octaldigits:/[0-7]+(_+[0-7]+)*/,binarydigits:/[0-1]+(_+[0-1]+)*/,hexdigits:/[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,regexpctl:/[(){}\[\]\$\^|\-*+?\.]/,regexpesc:/\\(?:[bBdDfnrstvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,tokenizer:{root:[[/[{}]/,"delimiter.bracket"],{include:"common"}],common:[[/[a-z_$][\w$]*/,{cases:{"@keywords":"keyword","@default":"identifier"}}],[/[A-Z][\w\$]*/,"type.identifier"],{include:"@whitespace"},[/\/(?=([^\\\/]|\\.)+\/([dgimsuy]*)(\s*)(\.|;|,|\)|\]|\}|$))/,{token:"regexp",bracket:"@open",next:"@regexp"}],[/[()\[\]]/,"@brackets"],[/[<>](?!@symbols)/,"@brackets"],[/!(?=([^=]|$))/,"delimiter"],[/@symbols/,{cases:{"@operators":"delimiter","@default":""}}],[/(@digits)[eE]([\-+]?(@digits))?/,"number.float"],[/(@digits)\.(@digits)([eE][\-+]?(@digits))?/,"number.float"],[/0[xX](@hexdigits)n?/,"number.hex"],[/0[oO]?(@octaldigits)n?/,"number.octal"],[/0[bB](@binarydigits)n?/,"number.binary"],[/(@digits)n?/,"number"],[/[;,.]/,"delimiter"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/"/,"string","@string_double"],[/'/,"string","@string_single"],[/`/,"string","@string_backtick"]],whitespace:[[/[ \t\r\n]+/,""],[/\/\*\*(?!\/)/,"comment.doc","@jsdoc"],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"]],comment:[[/[^\/*]+/,"comment"],[/\*\//,"comment","@pop"],[/[\/*]/,"comment"]],jsdoc:[[/[^\/*]+/,"comment.doc"],[/\*\//,"comment.doc","@pop"],[/[\/*]/,"comment.doc"]],regexp:[[/(\{)(\d+(?:,\d*)?)(\})/,["regexp.escape.control","regexp.escape.control","regexp.escape.control"]],[/(\[)(\^?)(?=(?:[^\]\\\/]|\\.)+)/,["regexp.escape.control",{token:"regexp.escape.control",next:"@regexrange"}]],[/(\()(\?:|\?=|\?!)/,["regexp.escape.control","regexp.escape.control"]],[/[()]/,"regexp.escape.control"],[/@regexpctl/,"regexp.escape.control"],[/[^\\\/]/,"regexp"],[/@regexpesc/,"regexp.escape"],[/\\\./,"regexp.invalid"],[/(\/)([dgimsuy]*)/,[{token:"regexp",bracket:"@close",next:"@pop"},"keyword.other"]]],regexrange:[[/-/,"regexp.escape.control"],[/\^/,"regexp.invalid"],[/@regexpesc/,"regexp.escape"],[/[^\]]/,"regexp"],[/\]/,{token:"regexp.escape.control",next:"@pop",bracket:"@close"}]],string_double:[[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,"string","@pop"]],string_single:[[/[^\\']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/'/,"string","@pop"]],string_backtick:[[/\$\{/,{token:"delimiter.bracket",next:"@bracketCounting"}],[/[^\\`$]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/`/,"string","@pop"]],bracketCounting:[[/\{/,"delimiter.bracket","@bracketCounting"],[/\}/,"delimiter.bracket","@pop"],{include:"common"}]}}}}]);